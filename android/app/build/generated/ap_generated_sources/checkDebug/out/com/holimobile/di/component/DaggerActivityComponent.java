// Generated by dagger.internal.codegen.ComponentProcessor (https://google.github.io/dagger).
package com.holimobile.di.component;

import android.app.Activity;
import android.content.Context;
import com.holimobile.di.module.ActivityModule;
import com.holimobile.di.module.ActivityModule_ProvideActivityContextFactory;
import com.holimobile.di.module.ActivityModule_ProvideActivityFactory;
import com.holimobile.mvp.ui.activity.LoginActivity;
import com.holimobile.mvp.ui.activity.MainActivity;
import com.holimobile.mvp.ui.activity.SettingActivity;
import com.holimobile.mvp.ui.activity.VerifyCodeActivity;
import com.holimobile.mvp.ui.activity.common.ImageGalleryActivity;
import com.holimobile.mvp.ui.activity.splash.SplashActivity;
import com.holimobile.mvp.ui.activity.webview.WebViewActivity;
import dagger.internal.Factory;
import dagger.internal.MembersInjectors;
import dagger.internal.Preconditions;
import dagger.internal.ScopedProvider;
import javax.inject.Provider;

public final class DaggerActivityComponent implements ActivityComponent {
  private Provider<Context> ProvideActivityContextProvider;

  private Provider<Context> getApplicationProvider;

  private Provider<Activity> ProvideActivityProvider;

  private DaggerActivityComponent(Builder builder) {
    assert builder != null;
    initialize(builder);
  }

  public static Builder builder() {
    return new Builder();
  }

  @SuppressWarnings("unchecked")
  private void initialize(final Builder builder) {

    this.ProvideActivityContextProvider =
        ScopedProvider.create(
            ActivityModule_ProvideActivityContextFactory.create(builder.activityModule));

    this.getApplicationProvider =
        new Factory<Context>() {
          private final ApplicationComponent applicationComponent = builder.applicationComponent;

          @Override
          public Context get() {
            return Preconditions.checkNotNull(
                applicationComponent.getApplication(),
                "Cannot return null from a non-@Nullable component method");
          }
        };

    this.ProvideActivityProvider =
        ScopedProvider.create(ActivityModule_ProvideActivityFactory.create(builder.activityModule));
  }

  @Override
  public Context getActivityContext() {
    return ProvideActivityContextProvider.get();
  }

  @Override
  public Context getApplicationContext() {
    return getApplicationProvider.get();
  }

  @Override
  public Activity getActivity() {
    return ProvideActivityProvider.get();
  }

  @Override
  public void inject(SplashActivity activity) {
    MembersInjectors.<SplashActivity>noOp().injectMembers(activity);
  }

  @Override
  public void inject(WebViewActivity activity) {
    MembersInjectors.<WebViewActivity>noOp().injectMembers(activity);
  }

  @Override
  public void inject(ImageGalleryActivity activity) {
    MembersInjectors.<ImageGalleryActivity>noOp().injectMembers(activity);
  }

  @Override
  public void inject(LoginActivity activity) {
    MembersInjectors.<LoginActivity>noOp().injectMembers(activity);
  }

  @Override
  public void inject(MainActivity activity) {
    MembersInjectors.<MainActivity>noOp().injectMembers(activity);
  }

  @Override
  public void inject(SettingActivity activity) {
    MembersInjectors.<SettingActivity>noOp().injectMembers(activity);
  }

  @Override
  public void inject(VerifyCodeActivity activity) {
    MembersInjectors.<VerifyCodeActivity>noOp().injectMembers(activity);
  }

  public static final class Builder {
    private ActivityModule activityModule;

    private ApplicationComponent applicationComponent;

    private Builder() {}

    public ActivityComponent build() {
      if (activityModule == null) {
        throw new IllegalStateException(ActivityModule.class.getCanonicalName() + " must be set");
      }
      if (applicationComponent == null) {
        throw new IllegalStateException(
            ApplicationComponent.class.getCanonicalName() + " must be set");
      }
      return new DaggerActivityComponent(this);
    }

    public Builder activityModule(ActivityModule activityModule) {
      this.activityModule = Preconditions.checkNotNull(activityModule);
      return this;
    }

    public Builder applicationComponent(ApplicationComponent applicationComponent) {
      this.applicationComponent = Preconditions.checkNotNull(applicationComponent);
      return this;
    }
  }
}
