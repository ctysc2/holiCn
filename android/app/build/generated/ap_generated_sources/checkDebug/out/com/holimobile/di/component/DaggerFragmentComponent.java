// Generated by dagger.internal.codegen.ComponentProcessor (https://google.github.io/dagger).
package com.holimobile.di.component;

import android.app.Activity;
import android.content.Context;
import androidx.fragment.app.FragmentActivity;
import com.holimobile.di.module.FragmentModule;
import com.holimobile.di.module.FragmentModule_ProvideActivityContextFactory;
import com.holimobile.di.module.FragmentModule_ProvideActivityFactory;
import com.holimobile.di.module.FragmentModule_ProvideFragmentActivityFactory;
import dagger.internal.Factory;
import dagger.internal.Preconditions;
import dagger.internal.ScopedProvider;
import javax.inject.Provider;

public final class DaggerFragmentComponent implements FragmentComponent {
  private Provider<Context> provideActivityContextProvider;

  private Provider<Context> getApplicationProvider;

  private Provider<Activity> provideActivityProvider;

  private Provider<FragmentActivity> provideFragmentActivityProvider;

  private DaggerFragmentComponent(Builder builder) {
    assert builder != null;
    initialize(builder);
  }

  public static Builder builder() {
    return new Builder();
  }

  @SuppressWarnings("unchecked")
  private void initialize(final Builder builder) {

    this.provideActivityContextProvider =
        ScopedProvider.create(
            FragmentModule_ProvideActivityContextFactory.create(builder.fragmentModule));

    this.getApplicationProvider =
        new Factory<Context>() {
          private final ApplicationComponent applicationComponent = builder.applicationComponent;

          @Override
          public Context get() {
            return Preconditions.checkNotNull(
                applicationComponent.getApplication(),
                "Cannot return null from a non-@Nullable component method");
          }
        };

    this.provideActivityProvider =
        ScopedProvider.create(FragmentModule_ProvideActivityFactory.create(builder.fragmentModule));

    this.provideFragmentActivityProvider =
        ScopedProvider.create(
            FragmentModule_ProvideFragmentActivityFactory.create(builder.fragmentModule));
  }

  @Override
  public Context getActivityContext() {
    return provideActivityContextProvider.get();
  }

  @Override
  public Context getApplicationContext() {
    return getApplicationProvider.get();
  }

  @Override
  public Activity getActivity() {
    return provideActivityProvider.get();
  }

  @Override
  public FragmentActivity getFragmentActivity() {
    return provideFragmentActivityProvider.get();
  }

  public static final class Builder {
    private FragmentModule fragmentModule;

    private ApplicationComponent applicationComponent;

    private Builder() {}

    public FragmentComponent build() {
      if (fragmentModule == null) {
        throw new IllegalStateException(FragmentModule.class.getCanonicalName() + " must be set");
      }
      if (applicationComponent == null) {
        throw new IllegalStateException(
            ApplicationComponent.class.getCanonicalName() + " must be set");
      }
      return new DaggerFragmentComponent(this);
    }

    public Builder fragmentModule(FragmentModule fragmentModule) {
      this.fragmentModule = Preconditions.checkNotNull(fragmentModule);
      return this;
    }

    public Builder applicationComponent(ApplicationComponent applicationComponent) {
      this.applicationComponent = Preconditions.checkNotNull(applicationComponent);
      return this;
    }
  }
}
